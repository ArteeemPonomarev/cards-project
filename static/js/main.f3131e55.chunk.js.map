{"version":3,"sources":["n1-main/m1-ui/components/Header/Header.module.css","n1-main/m1-ui/components/Main/Main.module.css","n1-main/m1-ui/components/Navbar/Navbar.tsx","n1-main/m1-ui/components/common/routes.ts","n1-main/m1-ui/components/Header/Header.tsx","n1-main/m1-ui/components/Profile/Profile.tsx","n1-main/m1-ui/components/common/Input/Input.tsx","n1-main/m1-ui/components/common/Button/Button.tsx","n1-main/m1-ui/components/LogIn/LogIn.tsx","n1-main/m1-ui/components/Main/Main.tsx","n1-main/m1-ui/components/App/App.tsx","serviceWorker.ts","n1-main/m2-bll/reducers/loginization-reducer.ts","n1-main/m2-bll/reducers/profile-reducer.ts","n1-main/m2-bll/reducers/create-pass-reducer.ts","n1-main/m2-bll/reducers/restore-pass-reducer.ts","n1-main/m2-bll/reducers/registration-reducer.ts","n1-main/m2-bll/store.ts","index.tsx","n1-main/m1-ui/components/Navbar/Navbar.module.css"],"names":["module","exports","Navbar","className","style","nav","activeClassName","active","to","Header","header","container","Profile","Input","props","type","placeholder","value","Button","LogIn","btnValue","Main","main","path","render","App","Boolean","window","location","hostname","match","initialState","isAuth","user","newPass","restoredPass","registartionData","rootReducer","combineReducers","loginization","state","profile","newPassword","resoterPass","registration","store","createStore","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","unregister","catch","error","console","message"],"mappings":"gGACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,UAAY,4B,mBCA9DD,EAAOC,QAAU,CAAC,KAAO,mBAAmB,UAAY,0B,gNCK3CC,EAAS,WAClB,OACI,yBAAKC,UAAWC,IAAMC,KAClB,kBAAC,IAAD,CAASC,gBAAiBF,IAAMG,OAAQC,GCR7B,YDQX,WACA,kBAAC,IAAD,CAASF,gBAAiBF,IAAMG,OAAQC,GCRxB,iBDQhB,gBACA,kBAAC,IAAD,CAASF,gBAAiBF,IAAMG,OAAQC,GCPzB,qBDOf,oBACA,kBAAC,IAAD,CAASF,gBAAiBF,IAAMG,OAAQC,GCT7B,iBDSX,gBACA,kBAAC,IAAD,CAASF,gBAAiBF,IAAMG,OAAQC,GCb/B,UDaT,YETL,SAASC,IACZ,OACI,yBAAKN,UAAWC,IAAMM,QAClB,yBAAKP,UAAWC,IAAMO,WAClB,kBAAC,EAAD,Q,4BCLHC,EAAU,WACnB,OACI,yCCHKC,EAAQ,SAACC,GAClB,OACI,6BACI,2BAAOC,KAAMD,EAAMC,KACZC,YAAaF,EAAMC,KACnBE,MAAOH,EAAMG,UCLnBC,EAAS,SAACJ,GACnB,OACI,6BACI,gCAASA,EAAMG,SCDdE,EAAQ,SAACL,GAClB,OACI,6BACI,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAQG,MAAOH,EAAMM,aCApBC,EAAO,WAChB,OACI,yBAAKlB,UAAWC,IAAMkB,MAClB,kBAAC,IAAD,CAAOC,KNVI,WMUWC,OAAQ,kBAAM,kBAAC,EAAD,SACpC,kBAAC,IAAD,CAAOD,KNZE,SMYWC,OAAQ,kBAAM,kBAAC,EAAD,CAAOJ,SAAU,gBCGhDK,EATH,WACV,OACE,yBAAKtB,UAAU,OACb,kBAACM,EAAD,MACA,kBAAC,EAAD,QCEciB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oBClBAC,EAAe,CACjBC,QAAQ,GCDND,EAAe,CACjBE,KAAM,ICDJF,EAAe,CACjBG,QAAS,ICDPH,EAAe,CACjBI,aAAc,ICDZJ,EAAe,CACjBK,iBAAkB,ICMhBC,EAAcC,YAAgB,CAChCC,aLF+B,WAA0E,IAAzEC,EAAwE,uDAA9CT,EAC1D,OAAOS,GKEPC,QJH2B,WAA0E,IAAzED,EAAwE,uDAA9CT,EACtD,OAAOS,GIGPE,YHJ6B,WAA4E,IAA3EF,EAA0E,uDAAhDT,EACxD,OAAOS,GGIPG,YFL8B,WAA4E,IAA3EH,EAA0E,uDAAhDT,EACzD,OAAOS,GEKPI,aDN+B,WAA4E,IAA3EJ,EAA0E,uDAAhDT,EAC1D,OAAOS,KCQEK,EAAQC,YAAYT,GCNjCU,IAASvB,OACL,kBAAC,IAAMwB,WAAP,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAUH,MAAOA,GACb,kBAAC,EAAD,SAIZI,SAASC,eAAe,SP0HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAV,GACJA,EAAaW,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBQhJ5B3D,EAAOC,QAAU,CAAC,IAAM,oBAAoB,OAAS,0B","file":"static/js/main.f3131e55.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3n3wX\",\"container\":\"Header_container__2_2y-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Main_main__2qvrg\",\"container\":\"Main_container__26TGM\"};","import React from 'react';\r\nimport style from './Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {login, registration, newPass, restorePass, profile} from '../common/routes';\r\n\r\n\r\nexport const Navbar = () => {\r\n    return (\r\n        <div className={style.nav}>\r\n            <NavLink activeClassName={style.active} to={profile}>Profile</NavLink>\r\n            <NavLink activeClassName={style.active} to={registration}>Registration</NavLink>\r\n            <NavLink activeClassName={style.active} to={restorePass}>Restore password</NavLink>\r\n            <NavLink activeClassName={style.active} to={newPass}>New password</NavLink>\r\n            <NavLink activeClassName={style.active} to={login}>Log In</NavLink>\r\n        </div>\r\n    )\r\n}","export const login = '/login';\r\nexport const profile = '/profile';\r\nexport const registration = '/registration';\r\nexport const newPass = '/new_password';\r\nexport const restorePass = '/restore_password';","import React from \"react\";\r\nimport style from './Header.module.css'\r\nimport {Navbar} from \"../Navbar/Navbar\";\r\n\r\nexport function Header() {\r\n    return (\r\n        <div className={style.header}>\r\n            <div className={style.container}>\r\n                <Navbar/>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\n\r\n\r\nexport const Profile = () => {\r\n    return (\r\n        <div>\r\n            Profile\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\nexport const Input = (props:any) => {\r\n    return (\r\n        <div>\r\n            <input type={props.type}\r\n                   placeholder={props.type}\r\n                   value={props.value} />\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\nexport const Button = (props: any) => {\r\n    return (\r\n        <div>\r\n            <button>{props.value}</button>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {Input} from \"../common/Input/Input\";\r\nimport {Button} from \"../common/Button/Button\";\r\n\r\nexport const LogIn = (props: any) => {\r\n    return (\r\n        <div>\r\n            <Input />\r\n            <Button value={props.btnValue}/>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport style from './Main.module.css'\r\nimport { Route } from 'react-router-dom';\r\nimport {profile, login} from \"../common/routes\";\r\nimport { Profile } from '../Profile/Profile';\r\nimport {LogIn} from \"../LogIn/LogIn\";\r\n\r\n\r\nexport const Main = () => {\r\n    return (\r\n        <div className={style.main}>\r\n            <Route path={profile} render={() => <Profile/>}/>\r\n            <Route path={login} render={() => <LogIn btnValue={'Log In'}/>}/>\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport './App.css';\nimport {Header} from \"../Header/Header\";\nimport {Main} from \"../Main/Main\";\n\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Header/>\n      <Main/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\r\n    isAuth: false\r\n}\r\n\r\ntype initialStateType = typeof initialState\r\n\r\nexport const loginizationReducer = (state: initialStateType = initialState, action:any):initialStateType => {\r\n    return state\r\n}","const initialState = {\r\n    user: {}\r\n}\r\n\r\ntype initialStateType = typeof initialState\r\n\r\nexport const profilenReducer = (state: initialStateType = initialState, action:any):initialStateType => {\r\n    return state\r\n}","const initialState = {\r\n    newPass: ''\r\n}\r\n\r\ntype initialStateType = typeof initialState\r\n\r\nexport const createPassReducer = (state: initialStateType = initialState, action: any): initialStateType => {\r\n    return state\r\n}\r\n","const initialState = {\r\n    restoredPass: ''\r\n}\r\n\r\ntype initialStateType = typeof initialState\r\n\r\nexport const restorePassReducer = (state: initialStateType = initialState, action: any): initialStateType => {\r\n    return state\r\n}\r\n","const initialState = {\r\n    registartionData: {}\r\n}\r\n\r\ntype initialStateType = typeof initialState\r\n\r\nexport const registrationReducer = (state: initialStateType = initialState, action: any): initialStateType => {\r\n    return state\r\n}\r\n","import {combineReducers, createStore} from \"redux\";\r\nimport {loginizationReducer} from \"./reducers/loginization-reducer\";\r\nimport {profilenReducer} from \"./reducers/profile-reducer\";\r\nimport {createPassReducer} from \"./reducers/create-pass-reducer\";\r\nimport {restorePassReducer} from \"./reducers/restore-pass-reducer\";\r\nimport {registrationReducer} from \"./reducers/registration-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    loginization: loginizationReducer,\r\n    profile: profilenReducer,\r\n    newPassword: createPassReducer,\r\n    resoterPass: restorePassReducer,\r\n    registration: registrationReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './n1-main/m1-ui/components/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./n1-main/m2-bll/store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <HashRouter>\n            <Provider store={store}>\n                <App/>\n            </Provider>\n        </HashRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__10mv7\",\"active\":\"Navbar_active__53s-6\"};"],"sourceRoot":""}